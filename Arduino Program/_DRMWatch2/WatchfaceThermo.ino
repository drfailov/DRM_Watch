// 'calibri0', 17x23px
const unsigned char  thermo0 [] PROGMEM = {
  0x80, 0xf0, 0xfc, 0xfe, 0xfe, 0x3f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x1f, 0xff, 0xfe, 0xfc, 0xf8, 
  0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x01, 0x0f, 0x1f, 0x3f, 0x7f, 0x7e, 0x78, 0x70, 0x70, 0x70, 0x78, 0x7c, 0x7f, 0x3f, 
  0x1f, 0x0f, 0x01
};
// 'calibri1', 17x23px
const unsigned char  thermo1 [] PROGMEM = {
  0x00, 0x00, 0x78, 0x38, 0x3c, 0x1c, 0x1e, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x78, 0x78, 0x78, 0x78, 0x78, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x78, 0x78, 
  0x78, 0x78, 0x20
};
// 'calibri2', 17x23px
const unsigned char  thermo2 [] PROGMEM = {
  0x00, 0x3c, 0x1e, 0x1e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x1f, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xf0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 
  0x00, 0x00, 0x00, 0x7c, 0x7e, 0x7f, 0x7f, 0x7f, 0x7f, 0x7b, 0x79, 0x78, 0x78, 0x78, 0x78, 0x78, 
  0x78, 0x78, 0x70
};
// 'calibri3', 17x23px
const unsigned char  thermo3 [] PROGMEM = {
  0x00, 0x1c, 0x1e, 0x0e, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0x20, 
  0x00, 0x00, 0x00, 0x00, 0x1c, 0x1c, 0x1c, 0x1c, 0x1e, 0x1e, 0x3f, 0x7f, 0xff, 0xff, 0xf3, 0xf1, 
  0xe0, 0x80, 0x00, 0x3c, 0x78, 0x78, 0x78, 0x70, 0x70, 0x70, 0x70, 0x78, 0x7c, 0x7f, 0x3f, 0x3f, 
  0x1f, 0x0f, 0x03
};
// 'calibri4', 17x23px
const unsigned char  thermo4 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xf8, 0xfe, 0x3f, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0xe0, 0xf8, 0xfc, 0xff, 0x9f, 0x87, 0x83, 0x80, 0x80, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x80, 0x80, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x7f, 0x7f, 0x7f, 0x7f, 
  0x7f, 0x03, 0x03
};
// 'calibri5', 17x23px
const unsigned char  thermo5 [] PROGMEM = {
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0x1f, 0x1f, 0x0f, 0x0e, 0x0e, 0x1e, 0x1e, 0x3e, 0xfe, 0xfc, 0xfc, 0xf8, 
  0xf0, 0x80, 0x00, 0x3c, 0x78, 0x78, 0x70, 0x70, 0x70, 0x70, 0x70, 0x78, 0x7c, 0x7f, 0x3f, 0x3f, 
  0x1f, 0x0f, 0x00
};
// 'calibri6', 17x23px
const unsigned char  thermo6 [] PROGMEM = {
  0x00, 0xc0, 0xf0, 0xf8, 0xfc, 0xfe, 0x1e, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x0f, 0x0f, 0x0f, 0x0e, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x1c, 0x1e, 0x0e, 0x0e, 0x0e, 0x0e, 0x1e, 0xfe, 0xfe, 0xfc, 
  0xfc, 0xf0, 0x00, 0x07, 0x1f, 0x3f, 0x7f, 0x7f, 0x78, 0x70, 0x70, 0x70, 0x78, 0x78, 0x7f, 0x3f, 
  0x3f, 0x0f, 0x07
};
// 'calibri7', 17x23px
const unsigned char  thermo7 [] PROGMEM = {
  0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0xcf, 0xff, 0xff, 0xff, 0xff, 0x3f, 
  0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xfc, 0xff, 0xff, 0x7f, 0x1f, 0x07, 0x01, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x78, 0x7e, 0x7f, 0x7f, 0x3f, 0x0f, 0x01, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00
};
// 'calibri8', 17x23px
const unsigned char  thermo8 [] PROGMEM = {
  0x00, 0xf8, 0xfc, 0xfe, 0xfe, 0xff, 0x0f, 0x07, 0x07, 0x07, 0x0f, 0x9f, 0xff, 0xfe, 0xfe, 0xfc, 
  0x00, 0x00, 0xc1, 0xe3, 0xf7, 0xf7, 0x7f, 0x3f, 0x3e, 0x1e, 0x3e, 0x3f, 0x7f, 0xff, 0xf3, 0xf1, 
  0xe0, 0x80, 0x0f, 0x1f, 0x3f, 0x7f, 0x7f, 0x78, 0x70, 0x70, 0x70, 0x70, 0x70, 0x78, 0x7f, 0x7f, 
  0x3f, 0x1f, 0x0f
};
// 'calibri9', 17x23px
const unsigned char  thermo9 [] PROGMEM = {
  0xe0, 0xf8, 0xfc, 0xfe, 0xfe, 0x1f, 0x0f, 0x07, 0x07, 0x0f, 0x0f, 0x3f, 0xfe, 0xfe, 0xfc, 0xf8, 
  0x80, 0x03, 0x0f, 0x1f, 0x3f, 0x3f, 0x3c, 0x78, 0x78, 0x78, 0x38, 0x38, 0x3c, 0xff, 0xff, 0xff, 
  0xff, 0x7f, 0x00, 0x38, 0x78, 0x78, 0x70, 0x70, 0x70, 0x70, 0x70, 0x78, 0x7c, 0x3f, 0x3f, 0x1f, 
  0x0f, 0x03, 0x00
};
// 'markC', 24x24px
const unsigned char  markC [] PROGMEM = {
  0x0c, 0x1e, 0x33, 0x33, 0x1e, 0x0c, 0x00, 0x80, 0xe0, 0xf0, 0xf8, 0xfc, 0xfc, 0x7c, 0x3e, 0x1e, 
  0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x3c, 0x3c, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0f, 0x3f, 0x3f, 0x7f, 0xfe, 0xf8, 0xf0, 0xf0, 
  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x78, 0x78
};

void WatchfaceThermo(byte hour, byte minute, byte second, byte day, byte month, int year, byte dayOfWeek, byte animate)
{
    displayClear();

    byte X = 96;        
    {//battery
      X -= 17;
      displayDrawBattery(X, 61);
      if(!batteryIsCharging() && !batteryIsLowPower()) X += 5;
    }

#ifdef LANG_EN
    displayDrawText(15, 7, 1, F("Temperature"));
#endif
#ifdef LANG_RU
    displayDrawText(15, 7, 1, F("Teмпepaтypa"));
#endif
#ifdef LANG_UA
    displayDrawText(15, 7, 1, F("Teмпepaтypa"));
#endif
    
    {//Temperature
      float temp = rtcGetTemp(); //-26.5
//          temp = (millis() / 1000);
//          temp -= 28;
      bool minus = temp < 0; //true
      if(minus)
        temp = -temp; //26.5
      int tempInt = temp * 10; //265
      byte temp1 = tempInt / 100; //2
      byte temp2 = tempInt - (temp1 * 100); //265-(2*100) = 65
      temp2 = temp2 / 10; // 6
      byte temp3 = tempInt - (temp1 * 100) - (temp2 * 10); //265-(2*100)-(6*10)=5
      byte screenWidth = 96;
      byte textWidth = 96;
      if(!minus){
        textWidth = 86;
        if(temp < 10){
          textWidth = 67;
        }
      }
      int xPosition = (textWidth-screenWidth) / 2;

      if(minus)
        displayFillRect(/*x*/xPosition+0, /*y*/34, /*w*/10, /*h*/4, /*c*/1);
      if(temp1 != 0)
        drawNumber(/*x*/xPosition+10, /*y*/24, /*num*/temp1, /*animate*/ animate);
      drawNumberThermo(/*x*/xPosition+29, /*y*/24, /*num*/temp2, /*animate*/ animate);
      displayFillCircle(/*x*/xPosition+49, /*y*/44, /*r*/ 2, /*color*/ 1);
      drawNumberThermo(/*x*/xPosition+53, /*y*/24, /*num*/temp3, /*animate*/ animate);
      displayDrawBitmap(/*x*/xPosition+72, /*y*/23, /*bmp*/markC, /*w*/24, /*h*/24, /*COLOR*/1);
    }
    
    displayUpdate();
}



void drawNumberThermo(byte x, byte y, byte num, byte animate){
  if(num == 0)
    displayDrawBitmap(/*x*/x, /*y*/y, /*bmp*/thermo0, /*w*/17, /*h*/23, /*COLOR*/1);
  if(num == 1)
    displayDrawBitmap(/*x*/x, /*y*/y, /*bmp*/thermo1, /*w*/17, /*h*/23, /*COLOR*/1);
  if(num == 2)
    displayDrawBitmap(/*x*/x, /*y*/y, /*bmp*/thermo2, /*w*/17, /*h*/23, /*COLOR*/1);
  if(num == 3)
    displayDrawBitmap(/*x*/x, /*y*/y, /*bmp*/thermo3, /*w*/17, /*h*/23, /*COLOR*/1);
  if(num == 4)
    displayDrawBitmap(/*x*/x, /*y*/y, /*bmp*/thermo4, /*w*/17, /*h*/23, /*COLOR*/1);
  if(num == 5)
    displayDrawBitmap(/*x*/x, /*y*/y, /*bmp*/thermo5, /*w*/17, /*h*/23, /*COLOR*/1);
  if(num == 6)
    displayDrawBitmap(/*x*/x, /*y*/y, /*bmp*/thermo6, /*w*/17, /*h*/23, /*COLOR*/1);
  if(num == 7)
    displayDrawBitmap(/*x*/x, /*y*/y, /*bmp*/thermo7, /*w*/17, /*h*/23, /*COLOR*/1);
  if(num == 8)
    displayDrawBitmap(/*x*/x, /*y*/y, /*bmp*/thermo8, /*w*/17, /*h*/23, /*COLOR*/1);
  if(num == 9)
    displayDrawBitmap(/*x*/x, /*y*/y, /*bmp*/thermo9, /*w*/17, /*h*/23, /*COLOR*/1);
  if(animate)
    displayUpdate();
}

#include "Display.cpp"

const byte groovyBlue[] PROGMEM = {
  125,
  0b10011101, 0b00100100, 0b00100100, 0b00100100, 0b00100100,
  0b10011000, 0b10011011, 0b10011000, 0b10011011, 0b10011101,
  0b00100100, 0b00100100, 0b00100100, 0b00100100, 0b10011000,
  0b10011011, 0b10011000, 0b10011011, 0b01011101, 0b10010001,
  0b01100100, 0b10010001, 0b01100100, 0b10010001, 0b01100100,
  0b10010001, 0b01100100, 0b10010001, 0b01100100, 0b10010001,
  0b01100100, 0b10011000, 0b10011011, 0b10011000, 0b10011011,
  0b01011101, 0b10011101, 0b01100100, 0b10011101, 0b01100100,
  0b10011101, 0b01100100, 0b10011101, 0b01100100, 0b10011101,
  0b01100100, 0b10011101, 0b01100100, 0b10011000, 0b10011011,
  0b10011000, 0b10011011, 0b01011101, 0b10011101, 0b01100000,
  0b10011101, 0b01100010, 0b10011101, 0b01100100, 0b10011101,
  0b01100000, 0b10011101, 0b10100010, 0b10100100, 0b10011101,
  0b01100100, 0b10011000, 0b10011011, 0b10011000, 0b10011011,
  0b01011101, 0b10011101, 0b01100000, 0b10011101, 0b01100010,
  0b10011101, 0b01100100, 0b10011101, 0b01100000, 0b10011101,
  0b10100010, 0b10100100, 0b10011101, 0b01100100, 0b10011000,
  0b10011011, 0b10011000, 0b10011011, 0b01011101, 0b10011101,
  0b01100000, 0b10011101, 0b01100011, 0b10011101, 0b01100010,
  0b10011101, 0b01100001, 0b10011101, 0b01100000, 0b10011101,
  0b01011111, 0b00100100, 0b10011000, 0b10011011, 0b10011000,
  0b10011011, 0b01011101, 0b11111111,
};
const byte* const getMelodyGroovyBlue() {
  return groovyBlue;
}



const byte badinerie[] PROGMEM = {
  125,
  0b01010111, 0b10011010, 0b10010111, 0b01010010, 0b10010111,
  0b10010010, 0b01001110, 0b10010010, 0b10001110, 0b00001011,
  0b10000110, 0b10001011, 0b10001110, 0b10001011, 0b10001101,
  0b10001011, 0b10001101, 0b10001011, 0b10001010, 0b10001101,
  0b10010000, 0b10001101, 0b01001110, 0b01001011, 0b01010111,
  0b10011010, 0b10010111, 0b01010010, 0b10010111, 0b10010010,
  0b01001110, 0b10010010, 0b10001110, 0b00001011, 0b01001110,
  0b01001110, 0b01001110, 0b01001110, 0b01010111, 0b01001110,
  0b11001110, 0b11001101, 0b11001110, 0b11001101, 0b01001101,
  0b01010010, 0b01010010, 0b01010010, 0b01010010, 0b01011010,
  0b01010010, 0b11010010, 0b11010001, 0b11010010, 0b11010001,
  0b01010001, 0b10001101, 0b10010010, 0b10010101, 0b10010010,
  0b10010100, 0b10010010, 0b10010100, 0b10010010, 0b10010001,
  0b10010100, 0b10010111, 0b10010100, 0b10010101, 0b10010100,
  0b10010101, 0b10010100, 0b10010010, 0b10010101, 0b10010010,
  0b10010001, 0b10010010, 0b10010111, 0b10010010, 0b10010001,
  0b10010010, 0b10011001, 0b10010010, 0b10010001, 0b10010010,
  0b10011010, 0b10010010, 0b10010001, 0b10010010, 0b10011010,
  0b10011001, 0b10010111, 0b10011001, 0b10010101, 0b10010100,
  0b10010010, 0b01010101, 0b01010100, 0b00010010, 0b11111111,
};
const byte* const getMelodyBadinerie() {
  return badinerie;
}

const byte mozart[] PROGMEM = {
  240,
  0b01010101, 0b10010100, 0b10100100, 0b01010100, 0b01100100,
  0b01010101, 0b10010100, 0b10100100, 0b01010100, 0b01100100,
  0b01010101, 0b10010100, 0b10100100, 0b00010100, 0b00011100,
  0b00100100, 0b10100100, 0b01011100, 0b10011011, 0b10100100,
  0b01011001, 0b01100100, 0b01011001, 0b10010111, 0b10100100,
  0b01010101, 0b01100100, 0b01010101, 0b11100100, 0b10010100,
  0b10100100, 0b01010010, 0b01100100, 0b01010010, 0b00100100,
  0b01100100, 0b01010100, 0b11100100, 0b01010010, 0b11100100,
  0b01010010, 0b01100100, 0b01010100, 0b10010010, 0b10100100,
  0b01010010, 0b01100100, 0b01010100, 0b10010010, 0b10100100,
  0b00010010, 0b01011011, 0b00100100, 0b01100100, 0b01011011,
  0b01011001, 0b01011000, 0b01100100, 0b01011000, 0b01010101,
  0b01010100, 0b01100100, 0b11100100, 0b01010100, 0b01010010,
  0b01010000, 0b01100100, 0b01010000, 0b00100100, 0b01100100,
  0b01011100, 0b10011011, 0b10100100, 0b00011011, 0b00011110,
  0b00011000, 0b00011011, 0b00011001, 0b00010100, 0b00100100,
  0b01011100, 0b11100100, 0b10011011, 0b10100100, 0b00011011,
  0b00011110, 0b00011000, 0b00011011, 0b00011001, 0b00011100,
  0b01011011, 0b01011001, 0b01010111, 0b01010101, 0b00010100,
  0b00010011, 0b00010100, 0b00100100, 0b10001000, 0b10100100,
  0b10001000, 0b10100100, 0b00001000, 0b00100100, 0b10001000,
  0b10100100, 0b10001000, 0b10100100, 0b00001000, 0b00100100,
  0b10001000, 0b10100100, 0b10001000, 0b10100100, 0b01001000,
  0b01100100, 0b10001000, 0b10100100, 0b10001000, 0b10100100,
  0b01001000, 0b01100100, 0b10001000, 0b10100100, 0b10001000,
  0b10100100, 0b00001000, 0b11111111,
};
const byte* const getMelodyMozart() {
  return mozart;
}


const byte mario[] PROGMEM = {
  100,
  0b10010000, 0b10010000, 0b11100100, 0b01010000, 0b10001100,
  0b01010000, 0b01010011, 0b01100100, 0b01000111, 0b01100100,
  0b01001100, 0b10100100, 0b01000111, 0b10100100, 0b01000100,
  0b10100100, 0b01001001, 0b01001011, 0b10001010, 0b01001001,
  0b01000111, 0b10010000, 0b10010011, 0b01010101, 0b10010001,
  0b01010011, 0b01010000, 0b10001100, 0b10001110, 0b01001011,
  0b10100100, 0b01001100, 0b10100100, 0b01000111, 0b10100100,
  0b01000100, 0b10100100, 0b01001001, 0b01001011, 0b10001010,
  0b01001001, 0b01000111, 0b10010000, 0b10010011, 0b01010101,
  0b10010001, 0b01010011, 0b01010000, 0b10001100, 0b10001110,
  0b01001011, 0b01100100, 0b10010011, 0b10010010, 0b10010001,
  0b11111111,
};
const byte* const getMelodyMario() {
  return mario;
}


const byte entertainer[] PROGMEM = {
  140,
  0b01001110, 0b01001111, 0b01010000, 0b00011000, 0b01010000,
  0b00011000, 0b01010000, 0b00011000, 0b01011000, 0b01011010,
  0b01011011, 0b01011100, 0b01011000, 0b01011010, 0b00011100,
  0b01010111, 0b00011010, 0b00011000, 0b00100100, 0b01001110,
  0b01001111, 0b01010000, 0b00011000, 0b01010000, 0b00011000,
  0b01010000, 0b00011000, 0b01100100, 0b01010101, 0b01010011,
  0b01010010, 0b01010101, 0b01011000, 0b00011100, 0b01011010,
  0b01011000, 0b01010101, 0b00011010, 0b11111111,
};
const byte* const getMelodyEntertainer() {
  return entertainer;
}


const byte toreador[] PROGMEM = {
  165,
  0b00011000, 0b00011010, 0b10011000, 0b00010101, 0b00010101,
  0b01010101, 0b10100100, 0b10010011, 0b00010101, 0b10010110,
  0b00010101, 0b00100100, 0b00010110, 0b00010011, 0b10011000,
  0b00010101, 0b00100100, 0b00010001, 0b00001110, 0b10010011,
  0b00001100, 0b00100100, 0b00010011, 0b01010011, 0b01011010,
  0b01011000, 0b01010110, 0b01010101, 0b11100100, 0b01010011,
  0b01010101, 0b01010110, 0b00010101, 0b00100100, 0b00010000,
  0b00010101, 0b00010101, 0b01010100, 0b01010111, 0b00011100,
  0b01100100, 0b11011010, 0b10011100, 0b11011010, 0b01011001,
  0b01011010, 0b01010011, 0b01010101, 0b00010110, 0b01100100,
  0b11010101, 0b10010110, 0b11010101, 0b01010001, 0b01011010,
  0b00011000, 0b00100100, 0b11010001, 0b10010011, 0b11010001,
  0b01001100, 0b01010110, 0b01010101, 0b01100100, 0b01010011,
  0b01100100, 0b01010001, 0b00100100, 0b00100100, 0b11111111,
};
const byte* const getMelodyToreador() {
  return toreador;
}


const byte nokiaTune[] PROGMEM = {
  112,
  0b10011111, 0b10011101, 0b01010101, 0b01010111, 0b10011100,
  0b10011010, 0b01010001, 0b01010011, 0b10011010, 0b10011000,
  0b01010000, 0b01010011, 0b00011000, 0b11111111,
};
const byte* const getMelodyNokiaTune() {
  return nokiaTune;
}


//return true if was played completely or false if interrupted
bool melodyPlayerPlayMelody(const byte* const melody) {
#ifdef LOG
  Serial.println(F("Play..."));
#endif
  melodyPlayerDrawScreen();
  pinMode(pinBuzzer, OUTPUT);
  byte length = melodyPlayerGetLength(melody);
  float tempo = pgm_read_byte(&melody[0]);
  float whole_notes_per_second = tempo / 240.0;
  for (byte i = 1; i < length - 1; i++) {
    byte b = pgm_read_byte(&melody[i]);
    byte duration = 0;
    if (bitRead(b, 7) == 0 && bitRead(b, 6) == 0) duration = 4;
    if (bitRead(b, 7) == 0 && bitRead(b, 6) == 1) duration = 8;
    if (bitRead(b, 7) == 1 && bitRead(b, 6) == 0) duration = 16;
    if (bitRead(b, 7) == 1 && bitRead(b, 6) == 1) duration = 32;
    float timeMs = 1000.0 / (whole_notes_per_second * duration);
    byte noteNumberByte = 0;
    for (byte i = 0; i < 6; i++)
      bitWrite(noteNumberByte, i, bitRead(b, i));
    float noteNumber = noteNumberByte;
    // Note frequency is calculated as (F*2^(n/12)),
    // We can use C2=65.41, or C3=130.81. C2 is a bit shorter.
    float frequency = 0;
    if (noteNumber < 36)
      frequency = 290.0 * pow(2.0, (noteNumber / 12.0));

    if (frequency != 0)
      tone(pinBuzzer, frequency);
    else
      noTone(pinBuzzer);
    long noteStarted = millis();
    while(millis() - noteStarted < timeMs);
    noTone(pinBuzzer);
    delay(10);
    if (isButtonUpPressed()) 
      return false;
  }
  noTone(pinBuzzer);
  pinMode(pinBuzzer, INPUT);
  delay(500);
  return true;
}

void melodyPlayerDrawScreen() {
  Display.displayClear();
  Display.displayDrawStopSign(/*X*/2, /*Y*/2, 1);
  Display.displayDrawVector(/*path*/pathZubat, /*x*/24, /*y*/5, /*animate*/false, /*color*/1);
#ifdef LANG_EN
  Display.displayDrawText(20, 55, 1, F("Playing..."));
#endif
#ifdef LANG_RU
  Display.displayDrawText(17, 55, 1, F("Пoпиликaeм!"));
#endif
  Display.displayUpdate();
}

void printBits(byte myByte) {
  for (byte mask = 0x80; mask; mask >>= 1) {
    if (mask & myByte)
      Serial.print('1');
    else
      Serial.print('0');
  }
}

int melodyPlayerGetLength(const byte* const melody) {
  for (byte i = 0; i < 254; i++) {
    byte b = pgm_read_byte(&melody[i]);
    if (b == 0b11111111) {
      return i + 1;
    }
  }
}

//*******************************************************************************************************************************************************
//***** Пример работы с библиотекой дисплея Nokia 1202  с контроллером STE2007 в среде Arduino IDE, версия драйвера 1.5
//***** Автор шрифтов и функциый jeka_tm http://arduino.ru/forum/proekty/khronograf-izmeritel-skorosti-puli-ot-prostogo-k-slozhnomu?page=5#comment-136147
//***** Все собрал в библиотеку и создал этот пример Gres, взять библиотеку для Arduino можно тут: https://yadi.sk/d/uwlwBOyijDYYR
//***** Все это можно найти на форуме http://arduino.ru/forum , http://arduino.ru/forum/programmirovanie/biblioteka-dlya-lcd-nokia-1100?page=5
//********************************************************************************************************************************************************
//  В библиотеке использован бинарный параметр color,
//  0 - означает пиксель выключен, цвет белый,
//  1 - пиксель включен, цвет черный.
//  В библиотеке присутствует функция Update();, которая обновляет изображение на дисплее выводя данные из буфера, ее необходимо использовать каждый раз,
//  после использования всех функций вывода информации на дисплей. 
//  На первый взгляд, может показаться, что это не удобно и можно модифицировать библиотеку, вставив эту функцию в конец всех функций вывода информации.
//  Так сделано специально, для возможности собрать готовое изображение на экран, состоящее из разных типов данных, строк, символов, изображений,
//  разных шрифтов и т.д. и только потом вывести весь буфер целиком за один раз обновив изображение на дисплее.
//  
//********************************************************************************************************************************************************

#include "lcd1202.h"
#include <LowPower.h>
#define LED A1
const int Up = 3;
const int Down = 2;
int buttonState = 0; 
//********************************************************************************************************************************************************
//******************************************************** Определение пинов подключения дисплея *********************************************************
//CS_PIN           6
//MOSI_PIN         7
//SCK_PIN          11
//LCD_RESET_PIN    5


LCD1202 lcd(5, 6, 7, 11);  // RST, CS, MOSI, SCK

//********************************************************************************************************************************************************
//******************************************************** Массив с логотипом для вывода *****************************************************************
static const unsigned char DRMTestLogo[768] PROGMEM =
{ 0xF8, 0x04, 0x04, 0x02, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0xF8,
0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
0x00, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
0x04, 0x04, 0x04, 0x04, 0x84, 0x44, 0x24, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x94, 0xD4,
0x94, 0x14, 0x94, 0x54, 0x34, 0x04, 0x04, 0xF4, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40,
0x20, 0x20, 0x10, 0x08, 0x08, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x01, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x80, 0x60, 0x18, 0x06, 0x01, 0x80, 0x60, 0xF0, 0x10, 0x10, 0x10, 0xD0, 0xF0, 0x10, 0x10, 0x11,
0x90, 0x70, 0x1F, 0x00, 0x00, 0x30, 0x1F, 0x10, 0x08, 0x04, 0x04, 0x02, 0x01, 0x01, 0x00, 0x00,
0xFE, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0x08, 0xF0, 0x00, 0x00, 0xFE, 0x02, 0x02,
0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0xF8, 0x00, 0x00, 0xFE, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,
0x00, 0x00, 0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x18, 0x06,
0x01, 0x00, 0xC0, 0x30, 0x3E, 0xC1, 0x00, 0x3F, 0x18, 0x84, 0x63, 0x78, 0x83, 0x3C, 0x98, 0x66,
0x19, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x7F, 0x00, 0x00, 0xFF, 0x02, 0x06,
0x0A, 0x12, 0x22, 0x42, 0x82, 0x01, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x30, 0x0C, 0x03, 0x00, 0x00, 0x00,
0x1C, 0x13, 0x10, 0x10, 0x10, 0x10, 0x13, 0x1C, 0x16, 0x11, 0x10, 0x10, 0x13, 0x1E, 0x11, 0x10,
0x10, 0x10, 0x1F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x03, 0x82, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x00, 0x00, 0x80, 0x00, 0x03, 0x00, 0x80,
0x00, 0x00, 0x00, 0x00, 0x80, 0x81, 0x82, 0x80, 0x80, 0x83, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80,
0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x80, 0x80, 0x40, 0x30, 0x0C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x03, 0x3C, 0xC0, 0x00, 0x80, 0x60, 0x80, 0x00, 0xC0, 0x3C, 0x03, 0x80, 0x70, 0x4E, 0x41,
0x4E, 0x70, 0x80, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x01, 0x00,
0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0xFF, 0x40, 0x20, 0x20, 0x20, 0x40, 0x80, 0x00, 0x00,
0x03, 0x03, 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
0x82, 0x42, 0x3E, 0x42, 0x82, 0x02, 0x02, 0x02, 0x82, 0x42, 0x3E, 0x42, 0x82, 0x02, 0x02, 0x02,
0x02, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x03, 0x0C, 0x03, 0x00, 0x03, 0x0C, 0x03, 0x00, 0x0C, 0x03, 0x00, 0x00, 0x00,
0x00, 0x00, 0x03, 0x0C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x08,
0x08, 0x08, 0x08, 0x04, 0x02, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00};

//********************************************************************************************************************************************************
//******************************************************** Анимация *****************************************************************
static const unsigned char Frame1[768] PROGMEM =
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x10, 0x90, 0x50, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x70, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xFE, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0x08, 0xF0, 0x00, 0x00, 0xFE, 0x02, 0x02,
0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0xF8, 0x00, 0x00, 0xFE, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,
0x00, 0x00, 0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x7F, 0x00, 0x00, 0xFF, 0x02, 0x06,
0x0A, 0x12, 0x22, 0x42, 0x82, 0x01, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x10, 0x1F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x03, 0x82, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x00, 0x00, 0x80, 0x00, 0x03, 0x00, 0x80,
0x00, 0x00, 0x00, 0x00, 0x80, 0x81, 0x82, 0x80, 0x80, 0x83, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80,
0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x03, 0x3C, 0xC0, 0x00, 0x80, 0x60, 0x80, 0x00, 0xC0, 0x3C, 0x03, 0x80, 0x70, 0x4E, 0x41,
0x4E, 0x70, 0x80, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x01, 0x00,
0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0xFF, 0x40, 0x20, 0x20, 0x20, 0x40, 0x80, 0x00, 0x00,
0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x03, 0x0C, 0x03, 0x00, 0x03, 0x0C, 0x03, 0x00, 0x0C, 0x03, 0x00, 0x00, 0x00,
0x00, 0x00, 0x03, 0x0C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x08,
0x08, 0x08, 0x08, 0x04, 0x02, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00};

static const unsigned char Frame2[768] PROGMEM =
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x80, 0x40, 0x20, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x90, 0xD0, 0x90, 0x10, 0x90, 0x50,
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0x80, 0x60, 0xF0, 0x10, 0x10, 0x10, 0xD0, 0xF0, 0x10, 0x10, 0x11, 0x90, 0x70, 0x1F, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xFE, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0x08, 0xF0, 0x00, 0x00, 0xFE, 0x02, 0x02,
0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0xF8, 0x00, 0x00, 0xFE, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,
0x00, 0x00, 0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x3E, 0xC1, 0x00, 0x3F, 0x18, 0x84, 0x63, 0x78, 0x83, 0x3C, 0x98, 0x66, 0x19, 0xF8, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x7F, 0x00, 0x00, 0xFF, 0x02, 0x06,
0x0A, 0x12, 0x22, 0x42, 0x82, 0x01, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x10, 0x10, 0x13, 0x1C, 0x16, 0x11, 0x10, 0x10, 0x13, 0x1E, 0x11, 0x10, 0x10, 0x10, 0x1F, 0xE0,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x03, 0x82, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x00, 0x00, 0x80, 0x00, 0x03, 0x00, 0x80,
0x00, 0x00, 0x00, 0x00, 0x80, 0x81, 0x82, 0x80, 0x80, 0x83, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80,
0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x03, 0x3C, 0xC0, 0x00, 0x80, 0x60, 0x80, 0x00, 0xC0, 0x3C, 0x03, 0x80, 0x70, 0x4E, 0x41,
0x4E, 0x70, 0x80, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x01, 0x00,
0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0xFF, 0x40, 0x20, 0x20, 0x20, 0x40, 0x80, 0x00, 0x00,
0x82, 0x02, 0x02, 0x02, 0x82, 0x42, 0x3E, 0x42, 0x82, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x03, 0x0C, 0x03, 0x00, 0x03, 0x0C, 0x03, 0x00, 0x0C, 0x03, 0x00, 0x00, 0x00,
0x00, 0x00, 0x03, 0x0C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x08,
0x08, 0x08, 0x08, 0x04, 0x02, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00};

static const unsigned char Frame3[768] PROGMEM =
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x20, 0x10, 0x10,
0x10, 0x10, 0x10, 0x10, 0x10, 0x90, 0xD0, 0x90, 0x10, 0x90, 0x50, 0x30, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x60, 0x18, 0x06, 0x01, 0x80, 0x60, 0xF0, 0x10,
0x10, 0x10, 0xD0, 0xF0, 0x10, 0x10, 0x11, 0x90, 0x70, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xFE, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0x08, 0xF0, 0x00, 0x00, 0xFE, 0x02, 0x02,
0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0xF8, 0x00, 0x00, 0xFE, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,
0x00, 0x00, 0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xE0, 0x18, 0x06, 0x01, 0x00, 0xC0, 0x30, 0x3E, 0xC1, 0x00, 0x3F, 0x18,
0x84, 0x63, 0x78, 0x83, 0x3C, 0x98, 0x66, 0x19, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x7F, 0x00, 0x00, 0xFF, 0x02, 0x06,
0x0A, 0x12, 0x22, 0x42, 0x82, 0x01, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xC0, 0x30, 0x0C, 0x03, 0x00, 0x00, 0x00, 0x1C, 0x13, 0x10, 0x10, 0x10, 0x10, 0x13, 0x1C, 0x16,
0x11, 0x10, 0x10, 0x13, 0x1E, 0x11, 0x10, 0x10, 0x10, 0x1F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x03, 0x82, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x00, 0x00, 0x80, 0x00, 0x03, 0x00, 0x80,
0x00, 0x00, 0x00, 0x00, 0x80, 0x81, 0x82, 0x80, 0x80, 0x83, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80,
0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x03, 0x3C, 0xC0, 0x00, 0x80, 0x60, 0x80, 0x00, 0xC0, 0x3C, 0x03, 0x80, 0x70, 0x4E, 0x41,
0x4E, 0x70, 0x80, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x01, 0x00,
0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0xFF, 0x40, 0x20, 0x20, 0x20, 0x40, 0x80, 0x00, 0x00,
0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x82, 0x42, 0x3E, 0x42, 0x82, 0x02, 0x02, 0x02, 0x82,
0x42, 0x3E, 0x42, 0x82, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x03, 0x0C, 0x03, 0x00, 0x03, 0x0C, 0x03, 0x00, 0x0C, 0x03, 0x00, 0x00, 0x00,
0x00, 0x00, 0x03, 0x0C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x08,
0x08, 0x08, 0x08, 0x04, 0x02, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00};

static const unsigned char Frame4[768] PROGMEM =
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x20, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x90, 0xD0,
0x90, 0x10, 0x90, 0x50, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x80, 0x60, 0x18, 0x06, 0x01, 0x80, 0x60, 0xF0, 0x10, 0x10, 0x10, 0xD0, 0xF0, 0x10, 0x10, 0x11,
0x90, 0x70, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xFE, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0x08, 0xF0, 0x00, 0x00, 0xFE, 0x02, 0x02,
0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0xF8, 0x00, 0x00, 0xFE, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,
0x00, 0x00, 0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x18, 0x06,
0x01, 0x00, 0xC0, 0x30, 0x3E, 0xC1, 0x00, 0x3F, 0x18, 0x84, 0x63, 0x78, 0x83, 0x3C, 0x98, 0x66,
0x19, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x7F, 0x00, 0x00, 0xFF, 0x02, 0x06,
0x0A, 0x12, 0x22, 0x42, 0x82, 0x01, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x30, 0x0C, 0x03, 0x00, 0x00, 0x00,
0x1C, 0x13, 0x10, 0x10, 0x10, 0x10, 0x13, 0x1C, 0x16, 0x11, 0x10, 0x10, 0x13, 0x1E, 0x11, 0x10,
0x10, 0x10, 0x1F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x03, 0x82, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x00, 0x00, 0x80, 0x00, 0x03, 0x00, 0x80,
0x00, 0x00, 0x00, 0x00, 0x80, 0x81, 0x82, 0x80, 0x80, 0x83, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80,
0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x80, 0x80, 0x40, 0x30, 0x0C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x03, 0x3C, 0xC0, 0x00, 0x80, 0x60, 0x80, 0x00, 0xC0, 0x3C, 0x03, 0x80, 0x70, 0x4E, 0x41,
0x4E, 0x70, 0x80, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x01, 0x00,
0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0xFF, 0x40, 0x20, 0x20, 0x20, 0x40, 0x80, 0x00, 0x00,
0x03, 0x03, 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
0x82, 0x42, 0x3E, 0x42, 0x82, 0x02, 0x02, 0x02, 0x82, 0x42, 0x3E, 0x42, 0x82, 0x02, 0x02, 0x02,
0x02, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x03, 0x0C, 0x03, 0x00, 0x03, 0x0C, 0x03, 0x00, 0x0C, 0x03, 0x00, 0x00, 0x00,
0x00, 0x00, 0x03, 0x0C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x08,
0x08, 0x08, 0x08, 0x04, 0x02, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00};
//********************************************************************************************************************************************************
//******************************************************** Массив с логотипом для вывода *****************************************************************
static const unsigned char Logo2[768] PROGMEM =
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xC0, 0x30, 0x08, 0x04, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x12,
0x3A, 0x12, 0x02, 0xF2, 0x0A, 0x06, 0x00, 0x00, 0x00, 0xC0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x80, 0x00,
0x00, 0x00, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x80, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xC0, 0x30, 0x0C, 0x03, 0x00, 0xC0, 0x30, 0x0C, 0xFE, 0x02, 0x82, 0x62, 0x1A, 0x7E, 0x82, 0x02,
0xC2, 0x32, 0x0E, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x01, 0xFE, 0x00, 0x00, 0xFF, 0x40, 0xC0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x20, 0x1F,
0x00, 0x00, 0xFF, 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02,
0x01, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x60, 0x1C, 0x03,
0x00, 0x80, 0x60, 0x18, 0x06, 0x07, 0x18, 0x60, 0x87, 0xC3, 0x30, 0x0C, 0x0F, 0x70, 0xC7, 0x33,
0x0C, 0x03, 0x1F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
0x40, 0x20, 0x10, 0x0F, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x60, 0x18, 0x06, 0x01, 0x00, 0x00, 0x00,
0x00, 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x02,
0x02, 0x02, 0x02, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x80, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x80, 0x70, 0x00, 0x00, 0xC0, 0x30, 0xC0, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10,
0xF0, 0x10, 0x10, 0x10, 0x00, 0x00, 0xC0, 0x20, 0x10, 0x10, 0x10, 0x10, 0x20, 0x40, 0x00, 0x00,
0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x60, 0x60, 0x60, 0x50, 0x50, 0x48, 0x46, 0x41, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
0x40, 0x40, 0x40, 0xC0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xC0, 0x40, 0x40, 0x40, 0x40,
0x40, 0x40, 0x40, 0x20, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x78, 0x80, 0x70, 0x0C,
0x70, 0x80, 0x78, 0x07, 0x80, 0x70, 0x0E, 0x09, 0x08, 0x09, 0x0E, 0x70, 0x80, 0x00, 0x00, 0x00,
0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x00, 0x00,
0xFF, 0x08, 0x04, 0x04, 0x04, 0x08, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x10, 0x08, 0x07, 0x08, 0x10, 0x00, 0x00, 0x00, 0x10, 0x08, 0x07, 0x08, 0x10, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x04, 0x04, 0xFC, 0x04, 0x04, 0x00, 0x00, 0xFC, 0x24, 0x24, 0x24, 0x24, 0x00, 0x00, 0x3C, 0x24,
0x24, 0x24, 0xE4, 0x00, 0x00, 0x04, 0x04, 0xFC, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC,
0x24, 0x24, 0x04, 0x04, 0x00, 0x00, 0xFC, 0x00, 0x00, 0xFC, 0x24, 0x64, 0xA4, 0x18, 0x00, 0x00,
0xFC, 0x08, 0x10, 0x08, 0xFC, 0x00, 0x00, 0xFC, 0x80, 0x40, 0x80, 0xFC, 0x00, 0x00, 0x80, 0x60,
0x9C, 0x60, 0x80, 0x00, 0x00, 0xFC, 0x24, 0x64, 0xA4, 0x18, 0x00, 0x00, 0xFC, 0x24, 0x24, 0x24,
0x24, 0x00, 0x00, 0x00, 0x08, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x04, 0x04, 0x04, 0xF8, 0x00,
0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01,
0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00,
0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,
0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00};
//****************************************************************************************************************************************

void setup() {
pinMode(LED, OUTPUT); // инициализируем A1 как выход  
pinMode(Up, INPUT);
pinMode(Down, INPUT);
Serial.begin(115200);
Serial.println("Hello!");
//****************************************************************************************************************************************
//******************************************************** Инициализация дисплея *********************************************************

Serial.println("Init");
lcd.Inicialize();  //Инициализация дисплея
lcd.Clear_LCD();  //Очистка дисплея

//****************************************************************************************************************************************

}

void loop() {

//******************************************************************************************************************************************
//***** Список всех функций библиотеки, доступных пользователю.
//***** Пример работы каждой функции, с коментариями, приведен ниже.
//******************************************************************************************************************************************
/*
       LCD1202(uint8_t _RES, uint8_t _CS, uint8_t _Data, uint8_t _Clock);                             // Определение пинов подключения дисплея
       void Inicialize();                                                                             //Инициализация дисплея
       void Clear_LCD();                                                                              //Очистка дисплея
       void Update();                                                             					//Обновление экрана, загрузка информации на дисплей из буфера
       void drawPixel(byte x, byte y, boolean color);                                                 //Включение пикселя
       void fillScreen(boolean color);                                                                //Полная заливка дисплея
       void drawChar(byte x, byte y, boolean color, unsigned char c);                                 //Вывод символа
       void print(byte x, byte y, boolean color, char *str);                                     	//Вывод строки
	   void print(byte x, byte y, boolean color, long num);											//Вывод целочисленных цифровых значений int, long, byte
       void print_1607(byte x, byte y, boolean color, char *str);             						//Вывод строки в заданное знакоместо в заданную строку, как в 1602, только тут 1607
       void drawLine(byte x0, byte y0, byte x1, byte y1, boolean color);                              //Рисование линии
       void drawFastVLine(byte x, byte y, byte h, boolean color);                               //Рисование вертикальной линии заданного высоты
       void drawFastHLine(byte x, byte y, byte w, boolean color);                               //Рисование горизонтальной линии заданной длины
       void drawRect(byte x, byte y, byte w, byte h, boolean color);                                  //Рисование прямоуголника
       void drawCircle(byte x0, byte y0, int16_t r, boolean color);                                   //Рисование окружности
       void drawRoundRect(byte x, byte y, byte w, byte h, byte r, boolean color);                     //Рисование скругленного прямоугольника
       void drawTriangle(byte x0, byte y0, byte x1, byte y1, byte x2, byte y2, boolean color);         //Рисование треуголника
       void drawCircleHelper(byte x0, byte y0, byte r, byte cornername, boolean color);                //Рисование дуги
       void fillCircle(byte x0, byte y0, byte r, boolean color);                                        //Рисование круга
       void fillCircleHelper(byte x0, byte y0, byte r, byte cornername, byte delta, boolean color);     //Рисование полукруга
       void fillRect(byte x, byte y, byte w, byte h, boolean color);                                    //Рисование закрашенного прямоугольника
       void fillRoundRect(byte x, byte y, byte w, byte h, byte r, boolean color);         //Рисование закрашенного, скругленного прямоугольника
       void fillTriangle(byte x0, byte y0, byte x1, byte y1, byte x2, byte y2, boolean color);            //Рисование закрашенного треугольника
       void drawBitmap(byte x, byte y, const char *bitmap, byte w, byte h, boolean color);                //Вывод изображения из массива
       void simb16x32(byte x, byte y, boolean color, byte c);                                               //Вывод цыфры размером 16x32 пикселя
       void simb10x16(byte x, byte y, boolean color, byte c);                                             //Вывод цифры размером 10x16 пикселей
*/


//******************************************************************************************************************************************
//******************************************************** Приветствуем пользователя *******************************************************

analogWrite(LED, 255);
lcd.drawBitmap(0, 0, Logo2, 96, 64, 1);   //Выводим картинку в координаты x, y, с размером 96 на 64 пикселя, с цветом 1 (1 - пиксель включен, темный)
lcd.Update();                                 //Обновляем дисплей(выводим картинку из буфера)
delay(3000);                                  //Любуемся картинкой
lcd.Clear_LCD();                              //Очищаем дисплей

Serial.println("DRM Watch Powerr");
lcd.print(1, 1, 1,  "                ");
lcd.print(1, 10, 1, "                ");
lcd.print(1, 20, 1, "DRM Watch Powerr");
lcd.print(1, 30, 1, "   Proto V1.1   ");
lcd.print(1, 40, 1, "                ");
lcd.print(1, 50, 1, "                ");
lcd.print(1, 60, 1, "                ");
lcd.Update();
delay(3000);
lcd.Clear_LCD();
lcd.drawBitmap(0, 0, Frame1, 96, 64, 1);   
lcd.Update();  
delay(500);
lcd.Clear_LCD();
lcd.drawBitmap(0, 0, Frame2, 96, 64, 1);   
lcd.Update();  
delay(500);
lcd.Clear_LCD();
lcd.drawBitmap(0, 0, Frame3, 96, 64, 1);   
lcd.Update();
delay(500);  
lcd.Clear_LCD();
lcd.drawBitmap(0, 0, Frame4, 96, 64, 1);   
lcd.Update();  
delay(500);
lcd.Clear_LCD();
lcd.drawBitmap(0, 0, DRMTestLogo, 96, 64, 1);   
lcd.Update();                                
lcd.print(3, 6, 1, " Проверим все! ");
lcd.Update();
delay(3000);
lcd.Clear_LCD();
lcd.drawBitmap(0, 0, DRMTestLogo, 96, 64, 1);   
lcd.Update();                                
lcd.print(3, 6, 1, " Тест дисплея  ");
lcd.Update();
delay(2000);
lcd.Clear_LCD();

//******************************************************************************************************************************************
//************************************************************ Заливаем весь дисплей *******************************************************

lcd.drawBitmap(0, 0, DRMTestLogo, 96, 64, 1);   
lcd.Update();   
Serial.println("Blink");                             
lcd.print(3, 6, 1, "   Помигаем!   ");
lcd.Update();
delay(2000);
for (int i=0; i<=2; i++) //Поморгаем всеми пикселями по в цикле
{
lcd.fillScreen(1);        //Включаем все пиксели
lcd.Update();             //Обновляем дисплей(выводим из буфера)
delay(500);               //Перекур
lcd.fillScreen(0);        //Выключаем все пиксели
lcd.Update();             //Обновляем дисплей(выводим из буфера)
delay(500);               //Перекур
}
lcd.Clear_LCD();        //Очищаем дисплей

//******************************************************************************************************************************************
//********************************************************** Проверка пикселей *************************************************************

lcd.drawBitmap(0, 0, DRMTestLogo, 96, 64, 1);   
lcd.Update();      
Serial.println("Lines");                          
lcd.print(3, 6, 1, "  Полосочки!   ");
lcd.Update();
delay(2000);
lcd.Clear_LCD();
for (int i=0; i<=65; ) //Нарисуем линию по координатам в цикле
{
lcd.drawLine(0, i, 95, i, 1);//Выводим по координатам x, y, x1, y1, черным цветом линию
i=i+2;
}
lcd.Update();                     //Обновляем дисплей(выводим из буфера)
delay(1000);                      //Перекур
lcd.Clear_LCD();                  //Очищаем дисплей

for (int i=1; i<=65; ) //Нарисуем линию по координатам в цикле
{
lcd.drawLine(1, i, 95, i, 1);//Выводим по координатам x, y, x1, y1, черным цветом линию
i=i+2;
}
lcd.Update();                     //Обновляем дисплей(выводим из буфера)
delay(1000);                      //Перекур
lcd.Clear_LCD();                  //Очищаем дисплей

for (int i=0; i<=95; ) //Нарисуем линию по координатам в цикле
{
lcd.drawLine(i, 0, i, 63, 1);//Выводим по координатам x, y, x1, y1, черным цветом линию
i=i+2;
}
lcd.Update();                     //Обновляем дисплей(выводим из буфера)
delay(1000);                      //Перекур
lcd.Clear_LCD();                  //Очищаем дисплей

for (int i=1; i<=95; ) //Нарисуем линию по координатам в цикле
{
lcd.drawLine(i, 0, i, 63, 1);//Выводим по координатам x, y, x1, y1, черным цветом линию
i=i+2;
}
lcd.Update();                     //Обновляем дисплей(выводим из буфера)
delay(1000);                      //Перекур
lcd.Clear_LCD();                  //Очищаем дисплей


//*********************************************************************************************************************************************
//********************************************** Печать символа размером 16х32 пикселя ********************************************************

lcd.drawBitmap(0, 0, DRMTestLogo, 96, 64, 1);   
lcd.Update();        
Serial.println("Numbers");                                                  
lcd.print(3, 6, 1, "   Циферки!    ");
lcd.Update();
delay(2000);
lcd.Clear_LCD();
lcd.simb16x32(1, 25, 1, 1);            //Выводим в координаты x, y, цветом 1, цифру 8, размером 16х32 пикселя
lcd.Update();                             //Обновляем дисплей(выводим картинку из буфера)
delay(500); 
lcd.simb16x32(27, 25, 1, 2);            //Выводим в координаты x, y, цветом 1, цифру 8, размером 16х32 пикселя
lcd.Update();                             //Обновляем дисплей(выводим картинку из буфера)
delay(500); 
lcd.simb16x32(53, 25, 1, 4);            //Выводим в координаты x, y, цветом 1, цифру 8, размером 16х32 пикселя
lcd.Update();                             //Обновляем дисплей(выводим картинку из буфера)
delay(500); 
lcd.simb16x32(79, 25, 1, 8);            //Выводим в координаты x, y, цветом 1, цифру 8, размером 16х32 пикселя
lcd.Update();                             //Обновляем дисплей(выводим картинку из буфера)
delay(2000);                              //Любуемся картинкой
lcd.Clear_LCD();                          //Очищаем дисплей
       
//**********************************************************************************************************************************************
//********************************************** Печать символа размером 10х16 пикселей ********************************************************
//for (int i=1; i<=85; )
//{
//lcd.simb10x16(i, 30, 1, 8);              //Выводим в координаты x, y, цветом 1, цифру 8, размером 10х16 пикселей
//i=i+12;
//}
//lcd.Update();                             //Обновляем дисплей(выводим картинку из буфера)
//delay(3000);                              //Любуемся картинкой
//lcd.Clear_LCD();                          //Очищаем дисплей
   
//**********************************************************************************************************************************************
//********************************************** Проверка подсветки ****************************************************************************

lcd.drawBitmap(0, 0, DRMTestLogo, 96, 64, 1);   
lcd.Update();         
Serial.println("Backlight");                                                                         
lcd.print(3, 6, 1, " Тест подсветки");
lcd.Update();
delay(2000);
lcd.Clear_LCD();
lcd.drawBitmap(0, 0, DRMTestLogo, 96, 64, 1);   
lcd.Update();                                
lcd.print(3, 6, 1, "   Включена!   ");
lcd.Update();
analogWrite(LED, 255);
delay(3000);
lcd.Clear_LCD();
lcd.drawBitmap(0, 0, DRMTestLogo, 96, 64, 1);   
lcd.Update();                                
lcd.print(3, 6, 1, "   Отключена!  ");
lcd.Update();
analogWrite(LED, 0);
delay(3000);
lcd.Clear_LCD();
lcd.drawBitmap(0, 0, DRMTestLogo, 96, 64, 1);   
lcd.Update();                                
lcd.print(3, 6, 1, "  Стробоскоп!  ");
lcd.Update();
for (int i=0; i<=14; i++) 
{
analogWrite(LED, 0);
delay(100);
analogWrite(LED, 255);
delay(100);
}
lcd.Clear_LCD();
//lcd.drawBitmap(0, 0, DRMTestLogo, 96, 64, 1);   
//lcd.Update();                                
//lcd.print(3, 6, 1, "   Плааавно!   ");
//lcd.Update();
//for (int i=1; i<=254; )
//{
//analogWrite(LED, i);            
//i=i+1;
//delay(50);
//}
//for (int i=255; i==0; )
//{
//analogWrite(LED, i);            
//i=i-1;
//delay(50);
//}
//delay(1000);
//lcd.Clear_LCD();

//**********************************************************************************************************************************************
//********************************************** Проверка пищалки ******************************************************************************

lcd.drawBitmap(0, 0, DRMTestLogo, 96, 64, 1);   
lcd.Update();          
Serial.println("Beep");                                                                                               
lcd.print(3, 6, 1, "  Попиликаем?  ");
lcd.Update();
delay(2000);
tone(12, 1000);  // пищать на пине 12, 1 кГц
delay(100);
noTone(12);      // не пищать
delay(100);
tone(12, 2000);  // пищать на пине 12, 1 кГц
delay(100);
noTone(12);      // не пищать
delay(100);
tone(12, 3000);  // пищать на пине 12, 1 кГц
delay(100);
noTone(12);      // не пищать
delay(100);
tone(12, 4000);  // пищать на пине 12, 1 кГц
delay(100);
noTone(12);      // не пищать
delay(100);
tone(12, 3000);  // пищать на пине 12, 1 кГц
delay(100);
noTone(12);      // не пищать
delay(100);
tone(12, 2000);  // пищать на пине 12, 1 кГц
delay(100);
noTone(12);      // не пищать
delay(100);
tone(12, 1000);  // пищать на пине 12, 1 кГц
delay(100);
noTone(12);      // не пищать
delay(1000);
lcd.Clear_LCD(); 

//**********************************************************************************************************************************************
//********************************************** Проверка кнопок *******************************************************************************

lcd.drawBitmap(0, 0, DRMTestLogo, 96, 64, 1);   
lcd.Update();          
Serial.println("Buutons");                                                                                                                     
lcd.print(3, 6, 1, "Проверим кнопки");
lcd.Update();
delay(2000);
lcd.Clear_LCD(); 
lcd.drawBitmap(0, 0, DRMTestLogo, 96, 64, 1);                                 
lcd.print(3, 6, 1, "  Нажми вверх! ");
Serial.println("Press UP");                                                                                                                     
lcd.Update();       
while (true) {
   buttonState = digitalRead(Up);
   if(buttonState == HIGH){
      tone(12, 1000);  // пищать на пине 12, 1 кГц
      delay(100);
      noTone(12);      // не пищать
      delay(100);
      tone(12, 2000);  // пищать на пине 12, 1 кГц
      delay(100);
      noTone(12);      // не пищать
      lcd.Clear_LCD();                 
      lcd.drawBitmap(0, 0, DRMTestLogo, 96, 64, 1);   
      lcd.Update();                                
      lcd.print(3, 6, 1, "    Нажата!    ");
      Serial.println("UP OK");
      lcd.Update();
      delay(1000);  
      break;
   }
   delay(10); 
}
lcd.Clear_LCD();
lcd.drawBitmap(0, 0, DRMTestLogo, 96, 64, 1);                                 
Serial.println("Press DOWN");
lcd.print(3, 6, 1, "  Нажми вниз! ");
lcd.Update();       
while (true) {
   buttonState = digitalRead(Down);
   if(buttonState == HIGH){
      tone(12, 2000);  // пищать на пине 12, 1 кГц
      delay(100);
      noTone(12);      // не пищать
      delay(100);
      tone(12, 1000);  // пищать на пине 12, 1 кГц
      delay(100);
      noTone(12);      // не пищать
      lcd.Clear_LCD();                 
      lcd.drawBitmap(0, 0, DRMTestLogo, 96, 64, 1);   
      lcd.Update();                         
      Serial.println("DOWN OK");       
      lcd.print(3, 6, 1, "    Нажата!    ");
      lcd.Update();
      delay(1000);  
      break;
   }
   delay(10); 
}
lcd.Clear_LCD();

//**********************************************************************************************************************************************
//********************************************** Окончание теста *******************************************************************************

lcd.drawBitmap(0, 0, DRMTestLogo, 96, 64, 1);   
lcd.Update();                                
lcd.print(3, 6, 1, "Тесты пройдены!");
Serial.println("TEST FINISH");       
lcd.Update();
tone(12, 2000);  // пищать на пине 12, 1 кГц
      delay(100);
      noTone(12);      // не пищать
      delay(100);
      tone(12, 3000);  // пищать на пине 12, 1 кГц
      delay(100);
      noTone(12);      // не пищать
      delay(100);
      tone(12, 4000);  // пищать на пине 12, 1 кГц
      delay(100);
      noTone(12);      // не пищать
      delay(100);
      tone(12, 5000);  // пищать на пине 12, 1 кГц
      delay(30);
      noTone(12);      // не пищать
      delay(30);
            tone(12, 5000);  // пищать на пине 12, 1 кГц
      delay(30);
      noTone(12);      // не пищать
      delay(30);
            tone(12, 5000);  // пищать на пине 12, 1 кГц
      delay(30);
      noTone(12);      // не пищать
      delay(30);
            tone(12, 5000);  // пищать на пине 12, 1 кГц
      delay(30);
      noTone(12);      // не пищать
      delay(30);
            tone(12, 5000);  // пищать на пине 12, 1 кГц
      delay(30);
      noTone(12);      // не пищать
      delay(30);
            tone(12, 5000);  // пищать на пине 12, 1 кГц
      delay(30);
      noTone(12);      // не пищать
      delay(30);
delay(2000);
lcd.Clear_LCD(); 
lcd.drawBitmap(0, 0, DRMTestLogo, 96, 64, 1);                                 
lcd.print(1, 3, 1, " Хочешь заново?");
lcd.print(13, 10, 1, "Нажми вверх!");
lcd.Update();  
delay(1000); 
analogWrite(LED, 0);    
while (true) {
   buttonState = digitalRead(Up);
   if(buttonState == HIGH){
      lcd.Clear_LCD();                 
      delay(1000);  
      break;
   }
   delay(10); 
}
lcd.Clear_LCD();
}
